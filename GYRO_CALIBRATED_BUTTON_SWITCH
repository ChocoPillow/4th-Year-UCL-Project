#include <Wire.h>
#include <math.h>

const int MPU = 0x68;
float RateRoll, RatePitch, RateYaw;
float RateCalibrationRoll, RateCalibrationPitch, RateCalibrationYaw;
float AngleRoll = 0, AnglePitch = 0, AngleYaw = 0;
float AccRoll, AccPitch;
int RateCalibrationNumber;
unsigned long lastTime;

// LED Pins
const int ledRollPos = 1;
const int ledRollNeg = 2;
const int ledPitchPos = 3;
const int ledPitchNeg = 4;

// System State LEDs
const int ledRed = 6;
const int ledGreen = 7;

// Button Pin
const int buttonPin = 5;
bool systemOn = true;  // System starts in ON state
bool lastButtonState = LOW;
unsigned long lastDebounceTime = 0;
const unsigned long debounceDelay = 50;

void gyro_signals(void) {
  Wire.beginTransmission(MPU);
  Wire.write(0x3B);
  Wire.endTransmission();
  Wire.requestFrom(MPU, 6);
  int16_t AccX = Wire.read() << 8 | Wire.read();
  int16_t AccY = Wire.read() << 8 | Wire.read();
  int16_t AccZ = Wire.read() << 8 | Wire.read();
  
  Wire.beginTransmission(MPU);
  Wire.write(0x43);
  Wire.endTransmission();
  Wire.requestFrom(MPU, 6);
  int16_t GyroX = Wire.read() << 8 | Wire.read();
  int16_t GyroY = Wire.read() << 8 | Wire.read();
  int16_t GyroZ = Wire.read() << 8 | Wire.read();

  RateRoll = (float)GyroX / 65.5;
  RatePitch = (float)GyroY / 65.5;
  RateYaw = (float)GyroZ / 65.5;
  
  AccRoll = atan2(AccY, AccZ) * 180 / M_PI;
  AccPitch = atan2(-AccX, sqrt(AccY * AccY + AccZ * AccZ)) * 180 / M_PI;
}

void setup() {
  Serial.begin(57600);
  Wire.begin();
  Wire.setClock(400000);
  delay(250);
  
  Wire.beginTransmission(MPU);
  Wire.write(0x6B);
  Wire.write(0x00);
  Wire.endTransmission();

  Serial.println("Calibrating Gyro...");
  for (RateCalibrationNumber = 0; RateCalibrationNumber < 2000; RateCalibrationNumber++) {
    gyro_signals();
    RateCalibrationRoll += RateRoll;
    RateCalibrationPitch += RatePitch;
    RateCalibrationYaw += RateYaw;
    delay(1);
  }
  RateCalibrationRoll /= 2000;
  RateCalibrationPitch /= 2000;
  RateCalibrationYaw /= 2000;
  Serial.println("Calibration Complete.");
  
  lastTime = millis();

  // Setup LED pins as output
  pinMode(ledRollPos, OUTPUT);
  pinMode(ledRollNeg, OUTPUT);
  pinMode(ledPitchPos, OUTPUT);
  pinMode(ledPitchNeg, OUTPUT);

  // Setup system status LEDs
  pinMode(ledRed, OUTPUT);
  pinMode(ledGreen, OUTPUT);

  // Setup button input with pullup resistor
  pinMode(buttonPin, INPUT_PULLUP);

  // Set initial LED states
  digitalWrite(ledGreen, HIGH);
  digitalWrite(ledRed, LOW);
}

void loop() {
  // Button debounce logic
  bool reading = digitalRead(buttonPin);
  if (reading != lastButtonState) {
    lastDebounceTime = millis(); // Reset debounce timer
  }

  if ((millis() - lastDebounceTime) > debounceDelay) {
    if (reading == LOW && lastButtonState == HIGH) { // Button press detected
      systemOn = !systemOn; // Toggle system state

      // Update LED indicators
      digitalWrite(ledGreen, systemOn ? HIGH : LOW);
      digitalWrite(ledRed, systemOn ? LOW : HIGH);
    }
  }
  lastButtonState = reading;

  if (!systemOn) {
    return; // Stop sensor readings if system is OFF
  }

  // Read gyro and process angles
  gyro_signals();
  
  RateRoll -= RateCalibrationRoll;
  RatePitch -= RateCalibrationPitch;
  RateYaw -= RateCalibrationYaw;
  
  unsigned long currentTime = millis();
  float dt = (currentTime - lastTime) / 1000.0;
  lastTime = currentTime;

  AngleRoll = 0.98 * (AngleRoll + RateRoll * dt) + 0.02 * AccRoll;
  AnglePitch = 0.98 * (AnglePitch + RatePitch * dt) + 0.02 * AccPitch;
  AngleYaw += RateYaw * dt; 

  // LED Control for roll and pitch thresholds
  digitalWrite(ledRollPos, AngleRoll > 20.0 ? HIGH : LOW);
  digitalWrite(ledRollNeg, AngleRoll < -20.0 ? HIGH : LOW);
  digitalWrite(ledPitchPos, AnglePitch > 20.0 ? HIGH : LOW);
  digitalWrite(ledPitchNeg, AnglePitch < -20.0 ? HIGH : LOW);
  
  Serial.print("Roll [°] = ");
  Serial.print(AngleRoll);
  Serial.print(" | Pitch [°] = ");
  Serial.println(AnglePitch);
  
  delay(50);
}
